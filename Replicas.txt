Información resumida de esta clase
#EstudiantesDePlatzi

Las réplicas nos permiten evitar problemas de entrada y salida en los sistemas operativos

Debemos tener el mindset de modo réplica

Es buena idea tener dos bases de datos en donde en una se hace la escritura y en otra la lectura, para esto se manejan dos servidores


Son mecánismos que permiten evitar problemas de entrada y salida en los SO.
“Existen 2 tipos de personas, los que ya usan réplicas y los que las van a usar…” - Piensa siempre en modo réplica.
A medida que la DB crece encontraremos limitaciones físicas y de electrónica, si la DB aumenta tanto su tamaño, las limitaciones serán de procesamiento, RAM, almacenamiento.
Hemos visto que las consultas en local son muy rápidas, sin embargo, cuando la aplicación ha sido desplegada pueden ocurrir multiples peticiones de lectura y escritura. Todos los motores de DB pueden hacer una ejecución a la vez, por lo que recibir tantas peticiones de consulta al mismo tiempo puede hacer que regresar una consulta se demore demasiado y eso puede ser catastrófico, pero las réplicas son la solución a este tipo de problemas.
¿Cuál es la estrategia? Tener una base de datos principal donde se realizan todas las modificaciones, y una base de datos secundaria dónde se realiza las lecturas. Separar las tareas es altamente beneficioso en cuanto al rendimiento de la aplicación, así, cuando se modifica una DB automáticamente se lleva el cambio a la DB de lectura. Todo lo que hay que hacer es configurar 2 servidores de postgres, uno como maestro y otro como esclavo. Se debe modificar la aplicación para que todas las modificaciones se hagan sobre el maestro y la lectura sobre la replica, o la DB en caliente. Es imposible realizar cambios en la DB de réplica.


Implementación de Réplicas en Postgres
Las replicas consisten en tener multiples servidores de Postgresql con un minimo de un Master y una Replica

para lograrlo se deben realizar hacer cambios en las configuraciones de la base de datos Master

en postgresql.conf

# los archivos de bitacora se comporten como hot standby
# es decir mantiene los archivos hasta que las replicas los utilizen
wal_level = hot_standby

# Este valor corresponde a la cantidad de replicas que vamos a tener
max_wal_senders = 1

# Como trataremos los archivos de bitacora, los archivaremos para que los puedan leer lar replicas
archive_mode = on

# Se especifica un comando de linux para copiar los archivos
archive_command = 'cp %p /tmp/%f'
tambien en el archivo pg_hba.conf en la base de datos Master
se debe agregar la ip de la base de datos para replicacion

local   all         all                               md5
host    all         all         127.0.0.1/32          ident
host    all         all         ::1/128               ident
host    all         all         0.0.0.0/0             md5
host    replication all         xxxxxxxxxx/32         trust
Ahora para la base de datos de Replica nos conectamos por SSH

Detenemos el servicio

sudo service postgresql stop
Borramos los datos locales

rm -rf /var/lib/pgsql/data/*
Traemos todos los datos de master y los traemos a replica

pg_basebackup -U $user_de_master -R -D /var/lib/pgsql/data/ --host=$host_de_master_db --port=$puerto_de_la_master_db
Modificamos el archivo postgresql.conf de replica

# esto define este postgres como una base de datos de replica
hot_standby = on
Ahora que los cambios estan hechos reiniciamos el servicio

sudo service postgresql start
A partir de ahora las configuraciones se han guardado y ya funcionan en modo de master y replica

incluso la contraseña del servicio replica ahora sera la misma del servicio master

a partir de ahora todos los cambios hechos en master se recrean en replica, y cualquier cambio hecho en replica no se ejecutara ya que estara en modo de solo lectura.